const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const Mailjet = require('node-mailjet');
const crypto = require('crypto');
const User = require('./src/models/User.js');
const Company = require('./src/models/Company.js');
const { sendPasswordResetEmail, sendRegistrationInvitationEmail } = require('./src/services/emailService.js');
require('./src/cron/registrationReminders.js'); // Initialize registration reminders cron job

// Load environment variables
dotenv.config();

// Initialize Mailjet if credentials are provided
let mailjet;
if (process.env.MAILJET_API_KEY && process.env.MAILJET_SECRET_KEY) {
  mailjet = new Mailjet({
    apiKey: process.env.MAILJET_API_KEY,
    apiSecret: process.env.MAILJET_SECRET_KEY
  });
  console.log('Mailjet client initialized for email delivery');
} else {
  console.log('Mailjet credentials not found, email functionality will be unavailable');
}

// Create Express app
const app = express();
const PORT = process.env.PORT || 5001;

// Middleware
app.use(cors({
  origin: 'http://localhost:5002',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(bodyParser.json());

// Simple authentication middleware
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) return res.status(401).json({ error: 'No token provided' });
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ error: 'Invalid token' });
  }
};

// MongoDB connection is required
if (!process.env.MONGO_URI) {
  console.error('❌ MONGO_URI is required but not provided in environment variables');
  process.exit(1);
}

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => {
    console.log('✅ MongoDB connected successfully');
  })
  .catch(err => {
    console.error('❌ MongoDB Connection Error:', err.message);
    console.error('MongoDB connection is required for the application to work');
    process.exit(1);
  });

// Define MongoDB models
const CompanySchema = new mongoose.Schema({
  company_id: { type: String, required: true, unique: true },
  company_name: { type: String, required: true },
  contact_email: String,
  contact_phone: String,
  createdAt: { type: Date, default: Date.now }
});

const PlayerSchema = new mongoose.Schema({
  _id: { type: mongoose.Schema.Types.ObjectId, auto: true },
  device_id: { type: String, required: true, unique: true },
  company_id: { type: String, required: true },
  current_url: String,
  is_online: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now }
});

const CommandSchema = new mongoose.Schema({
  player_id: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'Player' },
  command_type: { type: String, required: true },
  payload: { type: mongoose.Schema.Types.Mixed, default: {} },
  status: { type: String, enum: ['pending', 'processing', 'completed', 'failed'], default: 'pending' },
  createdAt: { type: Date, default: Date.now },
  completed_at: { type: Date }
});

const Company = mongoose.model('Company', CompanySchema);
const Player = mongoose.model('Player', PlayerSchema);
const Command = mongoose.model('Command', CommandSchema);

// API Routes

// Company routes
app.get('/api/companies', async (req, res) => {
  try {
    let userData = null;
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token) {
      try {
        userData = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key');
      } catch (error) {
        // Continue without authentication
      }
    }
    
    // If user is not superadmin, only return their company
    if (userData && userData.role !== 'superadmin' && userData.company_id) {
      const company = await Company.findOne({ company_id: userData.company_id });
      return res.json(company ? [company] : []);
    }
    
    // Otherwise return all companies
    const companies = await Company.find().sort({ company_name: 1 });
    return res.json(companies);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/companies', authenticateToken, async (req, res) => {
  try {
    // Only superadmin can create companies
    if (req.user.role !== 'superadmin') {
      return res.status(403).json({ error: 'Only superadmins can create companies' });
    }
    
    // Check if company with this ID already exists
    const existingCompany = await Company.findOne({ company_id: req.body.company_id });
    if (existingCompany) {
      return res.status(400).json({ error: `Company with ID "${req.body.company_id}" already exists` });
    }
    
    // Create new company
    const company = new Company(req.body);
    await company.save();
    return res.status(201).json(company);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Player routes
app.get('/api/players', async (req, res) => {
  try {
    let userData = null;
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token) {
      try {
        userData = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key');
      } catch (error) {
        // Continue without authentication
      }
    }
    
    const { company_id } = req.query;
    let query = {};
    
    // If company_id is provided or user is not superadmin, filter by company
    if (company_id || (userData && userData.role !== 'superadmin' && userData.company_id)) {
      query.company_id = company_id || userData.company_id;
    }
    
    const players = await Player.find(query).sort({ device_id: 1 });
    return res.json(players);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/players', authenticateToken, async (req, res) => {
  try {
    const { device_id, company_id } = req.body;
    
    // Validate required fields
    if (!device_id || !company_id) {
      return res.status(400).json({ error: 'Device ID and Company ID are required' });
    }
    
    // If user is not superadmin, they can only create players for their own company
    if (req.user.role !== 'superadmin' && req.user.company_id !== company_id) {
      return res.status(403).json({ error: 'You can only create players for your own company' });
    }
    
    // Check if player with this device_id already exists
    const existingPlayer = await Player.findOne({ device_id });
    if (existingPlayer) {
      return res.status(400).json({ error: `Player with device ID "${device_id}" already exists` });
    }
    
    // Create new player
    const player = new Player({
      device_id,
      company_id,
      current_url: req.body.current_url || '',
      is_online: req.body.is_online || false
    });
    
    await player.save();
    return res.status(201).json(player);
  } catch (error) {
    console.error('Error creating player:', error);
    res.status(500).json({ error: error.message });
  }
});

app.put('/api/players/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    const player = await Player.findByIdAndUpdate(
      id,
      { ...updates, updatedAt: Date.now() },
      { new: true }
    );
    
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    return res.json(player);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete a player
app.delete('/api/players/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    
    // Validate MongoDB ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: 'Invalid player ID format' });
    }
    
    // Check if player exists
    const player = await Player.findById(id);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // If user is not superadmin, they can only delete players from their own company
    if (req.user.role !== 'superadmin' && req.user.company_id !== player.company_id) {
      return res.status(403).json({ error: 'You can only delete players from your own company' });
    }
    
    // Delete the player
    await Player.findByIdAndDelete(id);
    
    // Also delete any associated commands
    await Command.deleteMany({ player_id: id });
    
    return res.status(200).json({ message: 'Player deleted successfully' });
  } catch (error) {
    console.error('Error deleting player:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/players/:id/commands', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const commandData = req.body;
    
    let playerId;
    try {
      playerId = mongoose.Types.ObjectId(id);
    } catch (error) {
      return res.status(400).json({ error: 'Invalid player ID format' });
    }
    
    // Check if player exists
    const player = await Player.findById(playerId);
    if (!player) {
      return res.status(404).json({ error: 'Player not found' });
    }
    
    // Create and save the command
    const command = new Command({
      player_id: playerId,
      command_type: commandData.type,
      payload: commandData.payload || {},
      status: 'pending'
    });
    
    await command.save();
    return res.json(command);
  } catch (error) {
    console.error('Error creating command:', error);
    res.status(500).json({ error: error.message });
  }
});

// User routes
app.get('/api/users', async (req, res) => {
  try {
    let userData = null;
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (token) {
      try {
        userData = jwt.verify(token, process.env.JWT_SECRET || 'default-secret-key');
      } catch (error) {
        // Continue without authentication
      }
    }
    
    const { company_id } = req.query;
    let query = {};
    
    // If company_id is provided or user is not superadmin, filter by company
    if (company_id || (userData && userData.role !== 'superadmin' && userData.company_id)) {
      query.company_id = company_id || userData.company_id;
    }
    
    const users = await User.find(query).sort({ email: 1 });
    return res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.put('/api/users/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    
    const user = await User.findByIdAndUpdate(
      id,
      { ...updates, updatedAt: Date.now() },
      { new: true }
    );
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    return res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete user endpoint
app.delete('/api/users/:userId', authenticateToken, async (req, res) => {
  try {
    const { userId } = req.params;
    
    // Only allow superadmins to delete users
    if (req.user.role !== 'superadmin') {
      return res.status(403).json({ error: 'Insufficient permissions' });
    }
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    // Don't allow deleting the last superadmin
    if (user.role === 'superadmin') {
      const superadminCount = await User.countDocuments({ role: 'superadmin' });
      if (superadminCount <= 1) {
        return res.status(400).json({ error: 'Cannot delete the last superadmin' });
      }
    }
    
    await User.findByIdAndDelete(userId);
    res.status(200).json({ message: 'User deleted successfully' });
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ error: error.message });
  }
});

// Auth routes
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Input validation
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    // Find user in MongoDB
    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Verify password
    if (!user.verifyPassword(password)) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    // Generate JWT token
    const token = jwt.sign(
      {
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      process.env.JWT_SECRET || 'default-secret-key',
      { expiresIn: '24h' }
    );

    res.json({
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      token
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/auth/register', authenticateToken, async (req, res) => {
  try {
    const { email, password, role, company_id } = req.body;

    // Input validation
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    // Check if user already exists
    const existingUser = await User.findOne({ email: email.toLowerCase() });
    if (existingUser) {
      return res.status(400).json({ error: 'Email is already registered' });
    }

    // Create new user
    const newUser = new User({
      email: email.toLowerCase(),
      role: role || 'user',
      company_id: company_id || null
    });

    newUser.setPassword(password);
    await newUser.save();
    
    console.log('✅ New user created:', { email, role });

    // Generate JWT token
    const token = jwt.sign(
      { 
        id: newUser._id,
        email: newUser.email,
        role: newUser.role,
        company_id: newUser.company_id
      },
      process.env.JWT_SECRET || 'default-secret-key',
      { expiresIn: '24h' }
    );

    return res.status(201).json({
      user: {
        id: newUser._id,
        email: newUser.email,
        role: newUser.role,
        company_id: newUser.company_id
      },
      token
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Password reset request endpoint
app.options('/api/auth/forgot-password', cors());
app.post('/api/auth/forgot-password', async (req, res) => {
  try {
    console.log('🔍 Password reset endpoint hit with request body:', req.body);
    const { email } = req.body;
    
    // Enhanced input validation
    if (!email) {
      return res.status(400).json({
        error: 'Email is required',
        field: 'email',
        message: 'Voer een e-mailadres in'
      });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        error: 'Invalid email format',
        field: 'email',
        message: 'Voer een geldig e-mailadres in'
      });
    }

    console.log(`📧 Processing password reset for email: ${email.toLowerCase()}`);

    // Rate limiting check (you might want to implement a proper rate limiter)
    const rateLimitKey = `pwd_reset_${email.toLowerCase()}`;
    // TODO: Implement rate limiting here if needed

    // Find user in MongoDB
    const user = await User.findOne({ email: email.toLowerCase() });

    if (!user) {
      console.log(`⚠️ User with email ${email} not found in database`);
      // For security, we still return a success message
      return res.json({
        success: true,
        message: 'Als er een account bestaat met dit e-mailadres, ontvang je binnen enkele minuten een e-mail met instructies om je wachtwoord te resetten.'
      });
    }

    // Check if a reset token was recently generated (within last 5 minutes)
    const cooldownPeriod = 5 * 60 * 1000; // 5 minutes in milliseconds
    if (user.resetPasswordExpires && user.resetPasswordExpires.getTime() - Date.now() > (60 * 60 * 1000 - cooldownPeriod)) {
      return res.status(429).json({
        error: 'Too many requests',
        message: 'Er is recent al een reset link verzonden. Wacht enkele minuten voordat je het opnieuw probeert.',
        retryAfter: Math.ceil((user.resetPasswordExpires.getTime() - Date.now() - (60 * 60 * 1000 - cooldownPeriod)) / 1000)
      });
    }

    // Generate reset token
    const resetToken = user.generateResetToken();
    await user.save();

    console.log(`✅ Reset token generated for user: ${email}`);

    // Send the email
    const emailResult = await sendPasswordResetEmail(email, resetToken);
    
    if (!emailResult.success) {
      console.error('Failed to send password reset email:', emailResult.error);
      return res.status(500).json({
        error: 'Failed to send email',
        message: 'Er is een probleem opgetreden bij het verzenden van de e-mail. Probeer het later opnieuw.'
      });
    }

    // In development, return token for testing
    if (process.env.NODE_ENV === 'development') {
      return res.json({ 
        success: true,
        message: 'Er is een e-mail verzonden met instructies om je wachtwoord te resetten.',
        resetToken: resetToken // Only in development
      });
    }

    return res.json({
      success: true,
      message: 'Als er een account bestaat met dit e-mailadres, ontvang je binnen enkele minuten een e-mail met instructies om je wachtwoord te resetten.'
    });
  } catch (error) {
    console.error('❌ Password reset error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: 'Er is een onverwachte fout opgetreden. Probeer het later opnieuw.'
    });
  }
});

// Password reset endpoint
app.post('/api/auth/reset-password', async (req, res) => {
  try {
    console.log('🔐 Password reset endpoint hit with body:', req.body);
    const { token, password } = req.body;
    
    if (!token || !password) {
      console.log('⚠️ Missing token or password in request');
      return res.status(400).json({ error: 'Token and password are required' });
    }

    // Validate token format (40 characters hex)
    if (!/^[a-f0-9]{40}$/.test(token)) {
      console.log('❌ Invalid token format:', token);
      return res.status(400).json({ error: 'Invalid or expired reset token' });
    }

    // Find user with matching reset token that hasn't expired
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpires: { $gt: Date.now() }
    });

    if (!user) {
      console.log('❌ No user found with valid token:', token);
      return res.status(400).json({ error: 'Invalid or expired reset token' });
    }

    console.log(`✅ User found with token: ${user.email}`);

    // Validate password
    if (password.length < 8) {
      return res.status(400).json({ error: 'Password must be at least 8 characters long' });
    }

    // Update password
    user.setPassword(password);
    
    // Clear reset token fields
    user.resetPasswordToken = undefined;
    user.resetPasswordExpires = undefined;

    await user.save();
    console.log(`🔑 Password updated for user: ${user.email}`);
    
    // Generate new JWT token for automatic login
    const jwtToken = jwt.sign(
      { 
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      process.env.JWT_SECRET || 'default-secret-key',
      { expiresIn: '24h' }
    );

    return res.json({
      message: 'Password has been reset successfully',
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      token: jwtToken
    });
  } catch (error) {
    console.error('❌ Password reset error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Registration invitation endpoint
app.post('/api/auth/register-invitation', authenticateToken, async (req, res) => {
  try {
    // Check if user is authorized to send invitations (superadmin only)
    if (req.user.role !== 'superadmin') {
      return res.status(403).json({ error: 'Only superadmins can send registration invitations' });
    }

    const { email, role, company_id } = req.body;

    // Validate required fields
    if (!email || !role) {
      return res.status(400).json({ error: 'Email and role are required' });
    }

    // Check if user already exists
    let user = await User.findOne({ email });
    if (user) {
      return res.status(400).json({ error: 'User with this email already exists' });
    }

    // If company_id is provided, verify it exists
    if (company_id) {
      const company = await Company.findOne({ company_id });
      if (!company) {
        return res.status(400).json({ error: 'Invalid company ID' });
      }
    }

    // Create new inactive user
    user = new User({
      email,
      role,
      company_id,
      isActive: false
    });

    // Generate registration token
    const registrationToken = user.generateRegistrationToken();

    // Save user
    await user.save();

    // Get company name if company_id is provided
    let companyName = '';
    if (company_id) {
      const company = await Company.findOne({ company_id });
      companyName = company ? company.company_name : '';
    }

    // Send invitation email
    const emailResult = await sendRegistrationInvitationEmail(email, registrationToken, role, companyName);

    if (!emailResult.success) {
      // If email fails, delete the user and return error
      await User.findByIdAndDelete(user._id);
      return res.status(500).json({ error: 'Failed to send invitation email' });
    }

    res.json({ message: 'Registration invitation sent successfully' });
  } catch (error) {
    console.error('Registration invitation error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Complete registration endpoint
app.post('/api/auth/complete-registration', async (req, res) => {
  try {
    const { token: registrationToken, password, googleToken } = req.body;

    if (!registrationToken) {
      return res.status(400).json({ error: 'Registration token is required' });
    }

    // Find user with valid registration token
    const user = await User.findOne({
      registrationToken: registrationToken,
      registrationTokenExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ error: 'Invalid or expired registration token' });
    }

    if (password) {
      // Validate password
      if (password.length < 8) {
        return res.status(400).json({ error: 'Password must be at least 8 characters long' });
      }

      // Set password and activate account
      user.setPassword(password);
    } else if (googleToken) {
      // TODO: Implement Google sign-in integration
      // For now, return error
      return res.status(501).json({ error: 'Google sign-in not yet implemented' });
    } else {
      return res.status(400).json({ error: 'Either password or Google token is required' });
    }

    await user.save();
    console.log(`✅ Registration completed for user: ${user.email}`);

    // Generate JWT token for automatic login
    const jwtToken = jwt.sign(
      {
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      process.env.JWT_SECRET || 'default-secret-key',
      { expiresIn: '24h' }
    );

    return res.json({
      message: 'Registration completed successfully',
      user: {
        id: user._id,
        email: user.email,
        role: user.role,
        company_id: user.company_id
      },
      token: jwtToken
    });
  } catch (error) {
    console.error('❌ Complete registration error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Resend registration invitation
app.post('/api/auth/resend-invitation/:userId', authenticateToken, async (req, res) => {
  try {
    const { userId } = req.params;

    // Only allow superadmins to resend invitations
    if (req.user.role !== 'superadmin') {
      return res.status(403).json({ error: 'Insufficient permissions' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    if (user.isActive) {
      return res.status(400).json({ error: 'User is already active' });
    }

    // Get company name if company_id exists
    let companyName = '';
    if (user.company_id) {
      const company = await Company.findOne({ company_id: user.company_id });
      if (company) {
        companyName = company.company_name;
      }
    }

    // Generate new registration token
    const registrationToken = user.generateRegistrationToken();
    user.lastReminderSent = new Date();
    await user.save();

    // Send invitation email
    const emailResult = await sendRegistrationInvitationEmail(
      user.email,
      registrationToken,
      user.role,
      companyName
    );

    if (!emailResult.success) {
      console.error('Failed to send invitation reminder:', emailResult.error);
      return res.status(500).json({
        error: 'Failed to send invitation reminder',
        message: 'Er is een probleem opgetreden bij het verzenden van de herinnering. Probeer het later opnieuw.'
      });
    }

    console.log('✅ Registration reminder sent to:', user.email);

    return res.json({
      success: true,
      message: 'Herinnering is verzonden.'
    });
  } catch (error) {
    console.error('❌ Resend invitation error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});